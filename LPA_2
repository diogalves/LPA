//escolho a linha com mais matchings, faço um a um essa linha, escolhendo caso haja mais de que um matching aquele que tenha mais matchings e por ai em diante.

#include <stdio.h>
#include <time.h>

int matrix[20][7];
int maximo;
int value;

int check(int peca1[7], int peca2[7],int i){
    int valor = 0;

    par[0] = peca1[0];
    par[1] = peca1[1];

    if(peca1[6]){
        if ((par[0] == peca2[1] && par[1] == peca2[2] && peca1[3] && peca2[5]) || (par[1] == peca2[1] && par[0] == peca2[2] && peca1[3] && peca2[5]) ||
            ((par[0] == peca2[0] && par[1] == peca2[1] && peca1[3] && peca2[3]) || (par[1] == peca2[0] && par[0] == peca2[1] && peca1[3] && peca2[3])) ||
            ((par[0] == peca2[2] && par[1] == peca2[0] && peca1[3] && peca2[4]) || (par[1] == peca2[2] && par[0] == peca2[0] && peca1[3] && peca2[4])) ) {
            
            valor = par[0] + par[1];
            matrix[i][6] = 1;
            funcao(n);
            matrix[i][6] = 0;
        }
    }
    else{
        if ((par[0] == peca2[1] && par[1] == peca2[2] && peca1[3] && peca2[5]) || (par[1] == peca2[1] && par[0] == peca2[2] && peca1[3] && peca2[5])) {
            valor = par[0] + par[1];
            matrix[i][6] = 1;
            funcao(n);
            matrix[i][6] = 0;
        }
        if((par[0] == peca2[2] && par[1] == peca2[0] && peca1[3] && peca2[4]) || (par[1] == peca2[2] && par[0] == peca2[0] && peca1[3] && peca2[4])){
            valor = par[0] + par[1];
            matrix[i][6] = 1;
            funcao(n);
            matrix[i][6] = 0;
        }
        
    }



    par[0] = peca1[1];
    par[1] = peca1[2];

    if(peca1[6])
    {
        if ((par[0] == peca2[1] && par[1] == peca2[2] && peca1[3] && peca2[5]) || (par[1] == peca2[1] && par[0] == peca2[2] && peca1[3] && peca2[5]) ||
            ((par[0] == peca2[0] && par[1] == peca2[1] && peca1[3] && peca2[3]) || (par[1] == peca2[0] && par[0] == peca2[1] && peca1[3] && peca2[3])) ||
            ((par[0] == peca2[2] && par[1] == peca2[0] && peca1[3] && peca2[4]) || (par[1] == peca2[2] && par[0] == peca2[0] && peca1[3] && peca2[4])) ) {
            
            valor = par[0] + par[1];
            matrix[i][6] = 1;
            funcao(n);
            matrix[i][6] = 0;
        }
    }
    else{
        if((par[0] == peca2[0] && par[1] == peca2[1] && peca1[5] && peca2[3]) || (par[1] == peca2[0] && par[0] == peca2[1] && peca1[5] && peca2[3])){
            valor = par[0] + par[1];
            matrix[i][6] = 1;
            funcao(n);
            matrix[i][6] = 0;
        }
        if((par[0] == peca2[2] && par[1] == peca2[0] && peca1[5] && peca2[4]) || (par[1] == peca2[2] && par[0] == peca2[0] && peca1[5] && peca2[4])){
            valor = par[0] + par[1];
            matrix[i][6] = 1;
            funcao(n);
            matrix[i][6] = 0;
        }


    }


    par[0] = peca1[0];
    par[1] = peca1[2];

    if(peca1[6])
    {
        if ((par[0] == peca2[1] && par[1] == peca2[2] && peca1[3] && peca2[5]) || (par[1] == peca2[1] && par[0] == peca2[2] && peca1[3] && peca2[5]) ||
            ((par[0] == peca2[0] && par[1] == peca2[1] && peca1[3] && peca2[3]) || (par[1] == peca2[0] && par[0] == peca2[1] && peca1[3] && peca2[3])) ||
            ((par[0] == peca2[2] && par[1] == peca2[0] && peca1[3] && peca2[4]) || (par[1] == peca2[2] && par[0] == peca2[0] && peca1[3] && peca2[4])) ) {
            
            valor = par[0] + par[1];
        }
    }
    else{
        if((par[0] == peca2[0] && par[1] == peca2[1] && peca1[4] && peca2[3]) || (par[1] == peca2[0] && par[0] == peca2[1] && peca1[4] && peca2[3])){
            valor = par[0] + par[1];
        }

        if((par[0] == peca2[1] && par[1] == peca2[2] && peca1[4] && peca2[5]) || (par[1] == peca2[1] && par[0] == peca2[2] && peca1[4] && peca2[5])){
            valor = par[0] + par[1];
        }
    }
    return valor;
}

int funcao(int n){
    int i,j;
    int sitio;

    //printf("Peca: %d %d %d %d %d %d\n",matrix[linha][0],matrix[linha][1],matrix[linha][2],matrix[linha][3],matrix[linha][4],matrix[linha][5]);
    
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(!matrix[j][6]){
                check(matrix[i],matrix[j],i);
            }
        }
    }
    if(valor > maximo){
        maximo = valor;
    }
}

int main(){
    int n=0,i;
    //clock_t start = clock();
    maximo = 0;
    value = 0;

    while(scanf("%d %d %d",&matrix[n][0],&matrix[n][1],&matrix[n][2]) != EOF){
        matrix[n][3] = 1;
        matrix[n][4] = 1;
        matrix[n][5] = 1;
        //posta ou nao
        matrix[n][6] = 0;
        n++;
    }

    for (i = 0; i < 1; i++){
        //poe a primeira peça no tabuleiro
        matrix[i][6] = 1;
        funcao(n);
        matrix[i][6] = 0;
        //printf("Peca: %d %d %d %d %d %d\n",matrix[i][0],matrix[i][1],matrix[i][2],matrix[i][3],matrix[i][4],matrix[i][5]);
    }
/*

    clock_t end = clock();
    float seconds = (float)(end - start) / CLOCKS_PER_SEC;

    //printf("tempo: %f\n",seconds);

    printf("%d\n",maximo);
*/
    return 0;
}
